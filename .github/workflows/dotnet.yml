name: .NET

#
# Skip the workflow with one of the following:
#   [skip ci]
#   [ci skip]
#   ***NO_CI***
#
# Note that a commit MUST include one of the following to create a release:
#   #patch
#   #minor
#   #major
#

on:
  workflow_dispatch:
    branches: [ master ]
  push:
    branches: [ master ]
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
      - '**/*.gitattributes'
      - 'CalculateX.png'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
      - '**/*.gitattributes'
      - 'CalculateX.png'

jobs:
  build:
    if: (github.event_name == 'workflow_dispatch') || (!contains(toJson(github.event.commits.*.message), '***NO_CI***') && !contains(toJson(github.event.commits.*.message), '[ci skip]') && !contains(toJson(github.event.commits.*.message), '[skip ci]'))

    runs-on: windows-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      # Work around https://github.com/actions/setup-dotnet/issues/155
      - name: Clean solution
        working-directory: ./Source
        run: dotnet clean --configuration Release
      - name: Clean NuGet
        working-directory: ./Source
        run: dotnet nuget locals all --clear

      # https://docs.microsoft.com/en-us/dotnet/core/tools/
      - name: Build
        working-directory: ./Source
        run: dotnet build CalculateX/CalculateX.csproj --nologo --self-contained --configuration Release --runtime win-x64

      - name: Test
        working-directory: ./Source
        run: |
          dotnet test MathExpressions.UnitTests/MathExpressions.UnitTests.csproj --nologo --verbosity minimal --logger:"console;verbosity=normal" --configuration Debug --runtime win-x64
          dotnet test CalculateX.UnitTests/CalculateX.UnitTests.csproj           --nologo --verbosity minimal --logger:"console;verbosity=normal" --configuration Debug --runtime win-x64

      - name: Build single-file deployment
        working-directory: ./Source
        # Publish to sibling `release` folder for github-tag-action step.
        run: dotnet publish CalculateX/CalculateX.csproj -p:PublishProfile=FolderProfile -o ../release/

      # Upload release artifact to share with next job
      # https://docs.github.com/en/actions/guides/storing-workflow-data-as-artifacts#about-workflow-artifacts
      # https://github.com/marketplace/actions/upload-a-build-artifact
      - name: Upload deployment folder as a build artifact
        uses: actions/upload-artifact@v3
        with:
          name: publish-package
          path: ./release/
          retention-days: 1
        # Use always() to always run this step even when there are failures
        #if: ${{ always() }}


  # Jobs are run in parallel unless `needs` is specified.
  # https://docs.github.com/en/actions/learn-github-actions/managing-complex-workflows#creating-dependent-jobs
  publish:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      # Download publish artifact from previous job
      # https://github.com/marketplace/actions/download-a-build-artifact
      - name: Download deployment folder as a build artifact
        uses: actions/download-artifact@v3
        with:
          name: publish-package
          path: ./release/

      # Delete publish artifact so it does not count against storage
      # https://github.com/marketplace/actions/delete-artifact
      - name: Delete build artifact
        uses: GeekyEggo/delete-artifact@v2
        with:
          name: publish-package
          failOnError: false

      - name: List folder
        run: |
          ls -la
          ls -la ./release/

      # https://github.com/marketplace/actions/github-tag-bump
      # We want to use the tag without the 'v' prefix for the release name.
      # The action does not output that, so we perform a dry run to get the tag without 'v'.
      - name: Get tag without 'v' prefix
        id: StepTagNoV
        uses: anothrNick/github-tag-action@1.62.0
        env:
          DRY_RUN: true
          DEFAULT_BUMP: none
          WITH_V: false

      # https://github.com/marketplace/actions/github-tag-bump
      - name: Bump version and push tag
        id: StepBump
        uses: anothrNick/github-tag-action@1.62.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: none
          WITH_V: true

      - name: Zip Release folder
        if: success()
        working-directory: ./release
        run: |
          zip ../CalculateX.zip *
          cd ..
          ls -la
          zipinfo CalculateX.zip

      # (This could be a separate action triggered by pushing a tag.)
      # https://github.com/marketplace/actions/create-release
      - name: Create release with artifact
        if: success() && steps.StepTagNoV.outputs.new_tag && steps.StepBump.outputs.new_tag
        uses: ncipollo/release-action@v1.12.0
        with:
          tag: ${{ steps.StepBump.outputs.new_tag }}
          name: ${{ steps.StepTagNoV.outputs.new_tag }}
          body: |
            The build in this ZIP file saves history and variables to temporary files.
            CalculateX in the Microsoft Store saves this information to permanent storage.
          # Note: Using "./release/*" uploads the individual files.
          artifacts: CalculateX.zip
          token: ${{ secrets.GITHUB_TOKEN }}
