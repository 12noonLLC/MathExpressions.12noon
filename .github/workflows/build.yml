# .github/workflows/build.yml
# Build and Release workflow for MathExpressions Android and Windows
#
# - Trigger on push to any branch, on version tags (e.g., v1.2.3), or on manual dispatch.
# - If a version tag (e.g., v1.2.3) is pushed, create a GitHub release for that version if not already present.
# - If the version tag is not on the 'main' branch, mark the GitHub release as 'draft'.
# - Manual dispatch builds the project but does not create a GitHub release.

name: Build Windows and MAUI

on:
  push:
    branches: [ '**' ]
    tags:
      - 'v*' # Match version tags like v1.2.3
    paths-ignore:
      - '**/*.gitignore'
      - '**/*.gitattributes'
      - '**/*.md'
      - 'LICENSE'
  pull_request:
    branches: [ main, yaml ]
    paths-ignore:
      - '**/*.gitignore'
      - '**/*.gitattributes'
      - '**/*.md'
      - 'LICENSE'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: write  # 👈 lets skip-duplicate-actions cancel other runs

env:
  # Path to the project files relative to the root of the project.
  PROJECT_WINDOWS_FILE_PATH: MathExpressions.Windows\MathExpressions.Windows.csproj
  PROJECT_ANDROID_FILE_PATH: MathExpressions.MAUI\MathExpressions.MAUI.csproj
  PROJECT_TESTS_FILE_PATH:   MathExpressions.UnitTests\MathExpressions.UnitTests.csproj

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

#  ARTIFACT_NAME: MathExpressions
  ARTIFACT_PACKAGE: package-mathexpressions

concurrency:
  group: mathexpressions-${{ github.sha }}
  cancel-in-progress: true

# Jobs are run in parallel unless `needs` is specified.
# https://docs.github.com/en/actions/learn-github-actions/managing-complex-workflows#creating-dependent-jobs
jobs:
  # https://github.com/marketplace/actions/skip-duplicate-actions
  precheck:
    name: 🧠 Check for redundant runs
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip.outputs.should_skip }}
    steps:
      - id: skip
        if: ${{ github.ref_type != 'tag' }}
        uses: fkirc/skip-duplicate-actions@v5.3.1
        with:
          paths_ignore: '[ "**/*.gitignore", "**/*.gitattributes", "**/*.md", "LICENSE" ]'
          skip_after_successful_duplicate: 'true'
          concurrent_skipping: 'same_content_newer'
          cancel_others: 'true'
          do_not_skip: '[ "push" ]'

  build:
    name: 🏗 Build and test
    needs: precheck
    if: ${{ needs.precheck.outputs.should_skip != 'true' }}
    runs-on: windows-latest

    steps:
      - name: 🚫 Prevent rerun if skipped
        run: |
          if ($env:GITHUB_RUN_ATTEMPT -gt 1)
          {
            Write-Host "This is a rerun. Skipping build."
            exit 1
          }

      - name: 🗒️ Output state
        run: |
          echo "🚀 Building..."
          echo "GITHUB_SHA: ${{ github.sha }}"
          echo "GITHUB_REF: ${{ github.ref }}"
          echo "GITHUB_REF_NAME: ${{ github.ref_name }}"
          echo "GITHUB_REF_TYPE: ${{ github.ref_type }}"
          #export GITHUB_REF_TYPE="${{ github.ref_type }}"

      # Reference the version with ${{ steps.extract_version.outputs.version }}
      - name: 🏷️ Extract version from tag
        id: extract_version
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          $version = $env:GITHUB_REF -replace '^refs/tags/v', ''
          echo "version=$version" >> $env:GITHUB_OUTPUT
          Write-Host "GITHUB_REF: $env:GITHUB_REF"
          echo "version=$version"

      - name: 🧾 Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🛠️ Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          dotnet-quality: ga

      - name: Install MAUI workload
        run: dotnet workload install maui
        #--ignore-failed-sources

      # Work around https://github.com/actions/setup-dotnet/issues/155
      - name: 🧹 Clean solution and NuGet
        run: |
          dotnet clean --configuration ${{env.BUILD_CONFIGURATION}} --runtime win-x64
          dotnet nuget locals all --clear

      - name: 🏗 Build application Windows
        run: |
          dotnet build ${{env.PROJECT_WINDOWS_FILE_PATH}} --nologo `
            --configuration ${{env.BUILD_CONFIGURATION}} `
            --self-contained `
            --runtime win-x64 `
            --property:DefineConstants="LICENSING MY_WINDOWS_WPF"

      - name: 🏗 Build application Android
        run: |
          dotnet build ${{env.PROJECT_ANDROID_FILE_PATH}} --nologo `
            --configuration ${{env.BUILD_CONFIGURATION}} `
            --framework net9.0-android
          #  --self-contained `
          #  --runtime win-x64 `

      # https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-test
      # verbosity detailed, minimal
      - name: 💯 Run unit tests
        run: |
          dotnet test ${{env.PROJECT_TESTS_FILE_PATH}} --nologo `
            --verbosity normal --logger:"console;verbosity=normal" `
            --runtime win-x64 `
            --configuration Release
          dotnet test ${{env.PROJECT_TESTS_FILE_PATH}} --nologo `
            --verbosity normal --logger:"console;verbosity=normal" `
            --runtime win-x64 `
            --configuration Debug

      # Ensure pack works even if we do not release.
      - name: 🧰 Pack NuGet packages to `release` folder
        run: |
          # pack => .\artifacts\package\release\LicenseManager_12noon.Client.1.2.3.4.nupkg
          # No need to use --include-symbols because it is specified in the project file.
          dotnet pack ${{env.PROJECT_WINDOWS_FILE_PATH}} `
            --nologo --no-restore --no-build `
            --configuration ${{env.BUILD_CONFIGURATION}} `
            --runtime win-x64 --output ./release/
          dotnet pack ${{env.PROJECT_ANDROID_FILE_PATH}} `
            --nologo --no-restore --no-build `
            --configuration ${{env.BUILD_CONFIGURATION}} `
            --runtime win-x64 --output ./release/

      - name: 🗒️ List folder
        run: |
          Get-ChildItem
          Get-ChildItem .\release\

      - name: 🔍 Extract and inspect NuGet package
        run: |
          # Use PowerShell syntax for variable handling
          #$packageName = "MathExpressions.MAUI.$env:VERSION.nupkg"
          $packageItem = Get-ChildItem ./release/*.nupkg | Select-Object -First 1
          Write-Host "Package name: $packageItem.Name"
          dir ./release/
          mkdir temp
          Copy-Item $packageItem.FullName ./temp/
          cd temp
          dir
          Rename-Item -Path $packageItem.Name -NewName ($packageItem.Name + '.zip')
          dir
          Write-Host "unzip $packageName.zip"
          Expand-Archive -Path ($packageItem.Name + '.zip') -DestinationPath ./
          dir
          Get-Content *.nuspec
          cd ..

      - name: 📂 Copy extra files to release folder
        run: |
          Copy-Item -Path LICENSE -Destination ./release/

      # Upload release artifact to share with next job
      # https://docs.github.com/en/actions/guides/storing-workflow-data-as-artifacts#about-workflow-artifacts
      # https://github.com/marketplace/actions/upload-a-build-artifact
      - name: 📤 Upload deployment folder as a build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.ARTIFACT_PACKAGE}}
          path: ./release/
          retention-days: 1

  #
  # Production release must be on 'main' and the tag must begin with 'v'.
  # If a release already exists, do not create the release.
  #
  # Manual dispatch must build but must not create a release.
  #
  # NORMAL -- make a bunch of commits and then push:
  # If this is a push without a version tag, build but do not create a release.
  #
  # TEST -- on a different branch, such as "yaml," create a tag and then push it:
  # If this is a push elsewhere with a v1.2.3 tag, create a DRAFT release for GitHub and no NuGet release.
  #
  # RELEASE -- create tag and push it:
  # If this is a push on `main` of a v1.2.3 tag, create a PRODUCTION release for GitHub and NuGet.
  #
  # •	Manual dispatch: Only the build job runs, no release is created.
  # •	Normal push (no tag): Only the build job runs, no release is created.
  # •	Tag push on other branch: Both build and release jobs run, draft release, no NuGet publish.
  # •	Tag push on main: Both build and release jobs run, production release and NuGet publish.
  #
  # | Scenario        | Build | Release Job Runs | Release Type | NuGet Publish | Notes               |
  # |-----------------|-------|------------------|--------------|---------------|---------------------|
  # | Normal (no tag) | Yes   | No               | N/A          | No            | Only build          |
  # | Manual dispatch | Yes   | No               | N/A          | No            | Only build          |
  # | Test (other br) | Yes   | Yes              | Draft        | No            | Tag on other branch |
  # | Release (main)  | Yes   | Yes              | Production   | Yes           | Tag on main         |
  #
  release:
    name: 🚀 Create GitHub package
    needs: build
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-latest

    steps:
      - name: 🧾 Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download publish artifact from previous job
      # https://github.com/marketplace/actions/download-a-build-artifact
      - name: 📥 Download deployment folder as a build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{env.ARTIFACT_PACKAGE}}
          path: ./release/

      - name: 🗒️ List folder
        run: ls -la ./release/

      - name: 🧩 Publish NuGet package to GitHub Packages
        run: |
          dotnet nuget push ./release/*.nupkg \
            --source "https://nuget.pkg.github.com/12noonLLC/index.json" \
            --api-key ${{ secrets.GITHUB_TOKEN }}

#      - name: 📦 Zip Release folder
#        working-directory: ./release
#        run: |
#          zip ../${{env.ARTIFACT_NAME}}.zip *
#
#      - name: 🏷️ Get short SHA of the tag
#        id: tag_sha
#        run: |
#          short_sha=$(git rev-parse --short HEAD)
#          echo "short_sha=$short_sha" >> $GITHUB_OUTPUT
#          echo "short_sha=$short_sha"
#
#      # If the workflow was inititated by pushing a tag,
#      # we need to know if it is on the 'main' branch.
#      - name: 🧪 Check if tag is on main
#        id: tag_on_main
#        run: |
#          # -n : non-empty, -z : unset or empty
#          BASE_BRANCH=$(git branch -r --contains $GITHUB_SHA | grep 'main' || true)
#          if [[ -n "$BASE_BRANCH" ]]; then
#            echo "on_main=true" >> $GITHUB_OUTPUT
#          else
#            echo "on_main=false" >> $GITHUB_OUTPUT
#          fi
#          echo "on_main=$on_main"
#
#      # Determine the version/tag for the release
#      # https://docs.github.com/en/actions/how-tos/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables
#      - name: 🏷️ Get version tag and release name
#        id: get_version
#        run: |
#          # Use the version tag
#          tag="${GITHUB_REF##*/}"   # e.g., refs/tags/v1.2.3 -> v1.2.3
#          name="${tag#v}"           # Remove 'v' prefix if present, e.g., v1.2.3 -> 1.2.3
#          # If not on `main` branch, append short SHA for test releases
#          if [[ "${{ steps.tag_on_main.outputs.on_main }}" != "true" ]]; then
#            name="${name}-${{ steps.tag_sha.outputs.short_sha }}"
#          fi
#          echo "tag=$tag" >> $GITHUB_OUTPUT
#          echo "name=$name" >> $GITHUB_OUTPUT
#          echo "tag=$tag"
#          echo "name=$name"
#
#      # Create a release only if one does not already exist for this name.
#      # (We check the name instead of the tag because we
#      # might have multiple test releases for a version.)
#      # https://github.com/marketplace/actions/github-script
#      - name: 🧪 Check if release exists with the same name
#        id: check_release
#        uses: actions/github-script@v7
#        with:
#          script: |
#            const name = '${{ steps.get_version.outputs.name }}';
#            const { data: releases } = await github.rest.repos.listReleases({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#            });
#            const exists = releases.some(r => r.name === name);
#            return exists;
#          result-encoding: string
#
#      # https://github.com/marketplace/actions/gh-release
#      - name: 🚀 Create GitHub Release
#        if: ${{ steps.check_release.outputs.result != 'true' }}
#        uses: softprops/action-gh-release@v2
#        with:
#          tag_name: ${{ steps.get_version.outputs.tag }}
#          name: ${{ steps.get_version.outputs.name }}
#          # tag on 'main' => latest
#          # else => draft
#          make_latest: ${{ startsWith(github.ref, 'refs/tags/v') && (steps.tag_on_main.outputs.on_main == 'true') }}
#          draft:     ${{ !(startsWith(github.ref, 'refs/tags/v') && (steps.tag_on_main.outputs.on_main == 'true')) }}
#          #draft: ${{ (github.ref != 'refs/heads/main') || (startsWith(github.ref, 'refs/tags/') && !startsWith(github.ref, 'refs/tags/v')) }}
#          # There is also a `prerelease` property. (Example: if manual start, which implies no v tag)
#          #prerelease: ${{ github.event_name == 'workflow_dispatch' }}
#          files: ${{env.ARTIFACT_NAME}}.zip
#          generate_release_notes: true
#          append_body: true
#          body: |
#            <a href="https://apps.microsoft.com/detail/9WZDNCRDLVCN?referrer=appbadge&mode=direct">
#              <img src="https://get.microsoft.com/images/en-us%20dark.svg" width="200"/>
#            </a>
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: 🗒️ Output release info
#        if: ${{ steps.check_release.outputs.result != 'true' }}
#        run: |
#          echo "Release created for tag: ${{ steps.get_version.outputs.tag }}"
#          echo "Release name: ${{ steps.get_version.outputs.name }}"

  #
  # https://docs.github.com/en/actions/how-tos/writing-workflows/choosing-when-your-workflow-runs/using-conditions-to-control-job-execution
  # "A job that is skipped will report its status as "Success"."
  # https://docs.github.com/en/actions/how-tos/writing-workflows/choosing-what-your-workflow-does/using-jobs-in-a-workflow
  # "If a job fails or is skipped, all jobs that need it are skipped unless
  #  the jobs use a conditional expression that causes the job to continue."
  #
  cleanup:
    name: 🧹 Clean up artifacts
    needs: [release]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      # Delete publish artifact so it does not count against storage
      # https://github.com/marketplace/actions/delete-artifact
      - name: ❌ Delete build artifact
        uses: GeekyEggo/delete-artifact@v5
        with:
          name: ${{ env.ARTIFACT_PACKAGE }}
          failOnError: false
